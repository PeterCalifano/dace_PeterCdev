# This is an example PKGBUILD file. Use this as a start to creating your own,
# and remove these comments. For more information, see 'man PKGBUILD'.
# NOTE: Please fill out the license field for your package! If it is unknown,
# then please put 'unknown'.

# The following guidelines are specific to BZR, GIT, HG and SVN packages.
# Other VCS sources are not natively supported by makepkg yet.

# Maintainer: Your Name <youremail@domain.com>
pkgname='dace' # '-bzr', '-git', '-hg' or '-svn'
pkgver=v2.0.1.r3.ga0ee164
pkgrel=1
pkgdesc="Differential Algebra Computational Toolbox (DACE) Library"
arch=(x86_64)
url=""
license=('apache')
groups=()
depends=()
makedepends=('git') # 'bzr', 'git', 'mercurial' or 'subversion'
provides=("${pkgname%-git}")
conflicts=("${pkgname%-git}")
replaces=()
backup=()
options=()
install=
source=('dace::git+https://github.com/dacelib/dace.git')
noextract=()
md5sums=('SKIP')

# Please refer to the 'USING VCS SOURCES' section of the PKGBUILD man page for
# a description of each element in the source array.

pkgver() {
	cd "$srcdir/${pkgname%-git}"

# The examples below are not absolute and need to be adapted to each repo. The
# primary goal is to generate version numbers that will increase according to
# pacman's version comparisons with later commits to the repo. The format
# VERSION='VER_NUM.rREV_NUM.HASH', or a relevant subset in case VER_NUM or HASH
# are not available, is recommended.

# Bazaar
#	printf "r%s" "$(bzr revno)"

# Git, tags available
#	printf "%s" "$(git describe --long --tags | sed 's/\([^-]*-\)g/r\1/;s/-/./g')"

# Git, no tags available
#	printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"

# Mercurial
#	printf "r%s.%s" "$(hg identify -n)" "$(hg identify -i)"

# Subversion
#	printf "r%s" "$(svnversion | tr -d 'A-z')"

	( set -o pipefail
    git describe --long --tags 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
    printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
  )
}

prepare() {
	cd "$srcdir/${pkgname%-git}"
	mkdir Release
}

build() {
	cd "$srcdir/${pkgname%-git}/Release"
	cmake ../
	make 
}

check() {
	cd "$srcdir/${pkgname%-git}/Release"
	#make -k check
}

package() {
	cd "$srcdir/${pkgname%-git}/Release"
	make DESTDIR="$pkgdir/" install
}
